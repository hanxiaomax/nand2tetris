 <class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
 <subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
 <parameterList>
 </parameterList>
<symbol> ) </symbol>
 <subroutineBody>
<symbol> { </symbol>
 <varDec>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> ; </symbol>
 </varDec>
 <varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
 </varDec>
 <varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> sum </identifier>
<symbol> ; </symbol>
 </varDec>
 <statements>
 <letStatement>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
 <expression>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<stringConstant> HOW MANY NUMBERS? HAHA </stringConstant>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </letStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
 <expression>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </letStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
 <expression>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
 </expression>
<symbol> ; </symbol>
 </letStatement>
 <whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
 <expression>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> { </symbol>
 <statements>
 <letStatement>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> [ </symbol>
 <expression>
<identifier> i </identifier>
<symbol> ] </symbol>
 </expression>
<symbol> ] </symbol>
<symbol> = </symbol>
 <expression>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<stringConstant> ENTER THE NEXT NUMBER: </stringConstant>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </letStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
 <expression>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
 </expression>
<symbol> ; </symbol>
 </letStatement>
 </statements>
 </whileStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
 <expression>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
 </expression>
<symbol> ; </symbol>
 </letStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> sum </identifier>
<symbol> = </symbol>
 <expression>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
 </expression>
<symbol> ; </symbol>
 </letStatement>
 <whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
 <expression>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> { </symbol>
 <statements>
 <letStatement>
<keyword> let </keyword>
<identifier> sum </identifier>
<symbol> = </symbol>
 <expression>
<identifier> sum </identifier>
<symbol> + </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
 </expression>
<symbol> ] </symbol>
<symbol> ; </symbol>
 </letStatement>
 <letStatement>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
 <expression>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
 </expression>
<symbol> ; </symbol>
 </letStatement>
 </statements>
 </whileStatement>
 <doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
 <expression>
<stringConstant> THE AVERAGE IS: </stringConstant>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </doStatement>
 <doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
 <expression>
<identifier> sum </identifier>
<symbol> / </symbol>
<identifier> length </identifier>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </doStatement>
 <doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
 <expression>
<symbol> ) </symbol>
 </expression>
<symbol> ) </symbol>
<symbol> ; </symbol>
 </doStatement>
 <returnStatement>
<keyword> return </keyword>
 </returnStatement>
 </statements>
 </subroutineBody>
 </subroutineDec>
 </class>
